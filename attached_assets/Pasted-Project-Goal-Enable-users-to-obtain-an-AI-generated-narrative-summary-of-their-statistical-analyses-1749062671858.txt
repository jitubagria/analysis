Project Goal: Enable users to obtain an AI-generated narrative summary of their statistical analyses (Descriptive Statistics, Statistical Tests, Correlation, P-Value Analysis, etc.) by sending selected data to the Gemini API and displaying the returned summary.

Implementation Flow:

Setup & Configuration (app.py & New Utility Files):

Create New Python Files:
gemini_utils.py: To handle all direct interactions with the Gemini API.
ai_data_preparation.py: To prepare and consolidate data from your application for the AI.
Gemini API Key Input (app.py - Sidebar):
Add a st.sidebar.text_input for the user to enter their Gemini API Key.
Store this key in st.session_state.gemini_api_key.
Initialize st.session_state.gemini_api_key_configured (boolean flag).
Install Dependencies: Ensure google-generativeai is installed and added to requirements.txt.
Core AI Interaction Logic (gemini_utils.py):

set_gemini_api_key(api_key) function:
Takes the API key.
Calls genai.configure(api_key=api_key).
Updates st.session_state.gemini_api_key_configured.
Includes error handling.
get_gemini_summary(text_data_to_analyze) function:
Checks if the API key is configured (using st.session_state.gemini_api_key_configured).
Initializes the Gemini generative model (e.g., gemini-pro).
Constructs a detailed prompt, embedding the text_data_to_analyze.
Calls the Gemini API (model.generate_content(prompt)).
Handles API errors and returns the summary text or an error message.
Data Preparation for AI (ai_data_preparation.py):

get_available_analysis_results() function:
Scans st.session_state to identify which analyses have been performed and have results stored (e.g., st.session_state.descriptive_stats_df, st.session_state.test_results, st.session_state.correlation_matrix, etc.).
Returns a list of names of these available analyses.
format_data_for_ai(selected_analyses_names) function:
Takes the list of analysis names selected by the user.
Retrieves the corresponding data for these selected analyses from st.session_state.
Converts DataFrames and other results into a single, well-formatted, structured string (as per the example structure you provided).
Handles cases where some data might be missing and returns the consolidated string or None.
User Interface & Workflow in "Output" Section (app.py - Step 7):

Add "AI Powered Analysis Summary" Sub-header.
API Key Check:
If st.session_state.gemini_api_key_configured is False, display a warning prompting the user to set the API key in the sidebar.
Analysis Selection (if API key is configured):
Call ai_data_preparation.get_available_analysis_results() to get the list of completed analyses.
If no analyses are available, display an informational message.
If analyses are available, use st.multiselect to allow the user to choose which of these analyses they want to include in the AI summary.
"Generate AI Summary" Button:
Display this button. It should ideally be active only if analyses are selected.
Button Click Logic:
Clear any previous st.session_state.ai_generated_summary.
Get the user's selections from the multiselect widget.
If no analyses are selected, show a warning.
Else, display a spinner (with st.spinner(...)).
Call ai_data_preparation.format_data_for_ai() with the user's selections to get the consolidated data string.
If consolidated_text is valid:
Call gemini_utils.get_gemini_summary() (it will use the API key from st.session_state).
Store the returned summary in st.session_state.ai_generated_summary.
If consolidated_text is not valid (e.g., no data found), set an appropriate message in st.session_state.ai_generated_summary.
Displaying the AI Summary:
If st.session_state.ai_generated_summary contains a result:
If it's an error message (e.g., starts with "Error:"), display it using st.error().
Otherwise, display st.success("AI Analysis Complete!") and show the summary using st.markdown() (for rich formatting) and/or st.text_area() (for easy copying).
Session State Management (app.py):

Ensure relevant analysis results (st.session_state.descriptive_stats_df, st.session_state.test_results, etc.) are consistently stored in st.session_state as they are generated in other parts of the application (Steps 3 & 4 primarily). This is crucial for ai_data_preparation.py to find them.
Initialize new session state variables for AI features (e.g., gemini_api_key_configured, ai_generated_summary).